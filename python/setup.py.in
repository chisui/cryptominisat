# -*- coding: utf-8 -*-
#
# CryptoMiniSat
#
# Original work Copyright (c) 2009-2014, Mate Soos. All rights reserved.
# Modified work Copyright (c) 2017, Pierre Vignet
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from distutils.core import setup, Extension
from distutils.cmd import Command
from distutils import sysconfig

__PACKAGE_VERSION__ = "0.2.0"
__LIBRARY_VERSION__ = "${CMS_FULL_VERSION}"


# Delete unwanted flags for C compilation
# Distutils has the lovely feature of providing all the same flags that
# Python was compiled with. The result is that adding extra flags is easy,
# but removing them is a total pain. Doing so involves subclassing the
# compiler class, catching the arguments and manually removing the offending
# flag from the argument list used by the compile function.
# That's the theory anyway, the docs are too poor to actually guide you
# through what you have to do to make that happen.
d = sysconfig.get_config_vars()
for k, v in d.items():
    for unwanted in ('-Wp', '-DNDEBUG', '-flto', '-Wstrict-prototypes'):
        if str(v).find(unwanted) != -1:
            v = d[k] = str(v).replace(unwanted, ' ')

################################################################################

def _init_posix(init):
    def wrapper():
        init()
        config_vars = sysconfig.get_config_vars()  # by reference
        if config_vars["MACHDEP"].startswith("sun"):
            # Sun needs forced gcc/g++ compilation
            config_vars['CC'] = 'gcc'
            config_vars['CXX'] = 'g++'

    return wrapper

sysconfig._init_posix = _init_posix(sysconfig._init_posix)

################################################################################

class TestCommand(Command):
    """Call tests with the custom 'python setup.py test' command."""

    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):

        import tests as tp
        tp.run()

################################################################################

# Source files
cryptoms_lib_files = [
    "cnf.cpp",
    "propengine.cpp",
    "varreplacer.cpp",
    "clausecleaner.cpp",
    "clauseusagestats.cpp",
    "prober.cpp",
    "occsimplifier.cpp",
    "subsumestrengthen.cpp",
    "clauseallocator.cpp",
    "sccfinder.cpp",
    "solverconf.cpp",
    "distillerallwithall.cpp",
    "distillerlongwithimpl.cpp",
    "str_impl_w_impl_stamp.cpp",
    "solutionextender.cpp",
    "completedetachreattacher.cpp",
    "searcher.cpp",
    "solver.cpp",
    "sqlstats.cpp",
    "implcache.cpp",
    "stamp.cpp",
    "compfinder.cpp",
    "comphandler.cpp",
    "hyperengine.cpp",
    "subsumeimplicit.cpp",
    "datasync.cpp",
    "reducedb.cpp",
    "clausedumper.cpp",
    "bva.cpp",
    "intree.cpp",
    "features_calc.cpp",
    "features_to_reconf.cpp",
    "solvefeatures.cpp",
    "searchstats.cpp",
    "xorfinder.cpp",
    "cryptominisat.cpp",
]

modules = [
    Extension(
        "pycryptosat",
        ["${CMAKE_CURRENT_BINARY_DIR}/src/GitSHA1.cpp"] + ["${CMAKE_CURRENT_SOURCE_DIR}/src/pycryptosat.cpp"] + ['${PROJECT_SOURCE_DIR}/src/' + fd for fd in cryptoms_lib_files],
        language = "c++",
        include_dirs=['${CMAKE_CURRENT_BINARY_DIR}/src', '${CMAKE_CURRENT_BINARY_DIR}', '${PROJECT_SOURCE_DIR}'],
        define_macros=[
            ('LIBRARY_VERSION', '"' + __LIBRARY_VERSION__ + '"')
        ],
        extra_compile_args=[
            #"-pthread",
            "-DUSE_PTHREADS",
            "-std=c++11",
        ],
        extra_link_args=[
        ]
    ),
]

setup(
    name = "pycryptosat",
    version = __PACKAGE_VERSION__,
    author = "Mate Soos",
    author_email = "soos.mate@gmail.com",
    url = "https://github.com/msoos/cryptominisat",
    license = "MIT",
    classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "Operating System :: OS Independent",
        "Programming Language :: C++",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.5",
        "License :: OSI Approved :: MIT License",
        "Topic :: Utilities",
    ],
    ext_modules = modules,
    description = "Bindings to CryptoMiniSat {} (a SAT solver)".\
        format(__LIBRARY_VERSION__),
    long_description = open('${CMAKE_CURRENT_SOURCE_DIR}/README.rst').read(),
    cmdclass={
        'test': TestCommand
    }
)
